(define (log message)
  (display message)
  (newline)
)

(define (main args)
  (define (cc l)
    (lambda (other)
      (l (lambda () (set! other (call/cc other))))
    )
  )
  (define (yield other)
    (let loop ()
      (log "yield")
      (set! other (call/cc other))
      ;(loop)
    )
  )
  (define resume (cc (lambda (y)
    (log 1)
    (y)
    (log 2)
    (y)
    (log 3)
  )))

  (resume yield)
)
