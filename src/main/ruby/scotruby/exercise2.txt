Ruby Object Model Exercises
We’ll build on your understanding of classes, objects, and self to create your own version of attr_writer. The first version you write will be a drop-in replacement while the second version will maintain a list of all the attributes in a class.

1. Create Your Own attr_writer

Create a class-level “macro” called my_attr_writer. It will take a variable number of symbols and create an attribute writer for each. Here are some tests to guide you.

class SomeClass

  # ... define the my_attr_writer method here....
end

require 'test/unit'

class TextMyAttrWriter < Test::Unit::TestCase

  class ::SomeClass
    my_attr_writer :one, :two
  end

  def test_my_attr_writer
    methods = SomeClass.public_instance_methods(false)
    assert methods.include?(:one=), methods.inspect
    assert methods.include?(:two=), methods.inspect

    obj = SomeClass.new
    obj.one = 123
    assert obj.instance_variables.include?(:@one)
    assert_equal 123, obj.instance_variable_get(:@one)
  end

end
Although you could do this the hard way, constructing the writer methods dynamically, there’s an easier way—the original attr_writer is itself a method, and you can always call it.

Show Answer

2. Keep Track of Writable Attributes

Extend your my_attr_writer method so that it keeps track of each attribute that is defined. Make this list available as a class method called attribute_writers.

require 'test/unit'

class TextMyAttrWriter < Test::Unit::TestCase

  class ::SomeClass
    my_attr_writer :one, :two
    my_attr_writer :three
  end
  def test_keeps_track
    assert_equal [:one, :two, :three], SomeClass.attribute_writers
  end
end
